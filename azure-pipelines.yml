trigger:
  branches:
    include:
      - main  # Define the branch for which the pipeline should trigger on code push

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'  # Use Python 3.x version

- script: |
    sudo apt-get update && sudo apt-get install -y unzip
    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    sudo apt-get update && sudo apt-get install -y terraform
  displayName: 'Install Terraform'

- checkout: self

- script: |
    cd path/to/terraform/config  # Change directory to where your Terraform configurations reside
    terraform init
    terraform plan -out=tfplan
    terraform apply tfplan
  displayName: 'Terraform Apply'
  env:
    ARM_CLIENT_ID: $(servicePrincipalId)
    ARM_CLIENT_SECRET: $(servicePrincipalKey)
    ARM_SUBSCRIPTION_ID: $(subscriptionId)
    ARM_TENANT_ID: $(tenantId)
    # You should set these environment variables in your Azure Pipelines variables configuration

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)/terraform_output'  # Path to save Terraform output for future reference
    artifact: 'terraform_output'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'YourAzureServiceConnection'  # Name of your Azure service connection in Azure Pipelines
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Additional Azure CLI commands for post-deployment actions, if any

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Pipeline.Workspace)/terraform_output'
    Contents: '**/*.tfplan'
    CleanFolders: true
